{"name": "test_steps_demo[pytest]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\n  (Session info: chrome=107.0.5304.110)\nStacktrace:\n0   chromedriver                        0x000000010fe282c8 chromedriver + 4752072\n1   chromedriver                        0x000000010fda8463 chromedriver + 4228195\n2   chromedriver                        0x000000010fa0bb18 chromedriver + 441112\n3   chromedriver                        0x000000010fa4879c chromedriver + 690076\n4   chromedriver                        0x000000010fa49061 chromedriver + 692321\n5   chromedriver                        0x000000010fa845e4 chromedriver + 935396\n6   chromedriver                        0x000000010fa69d2d chromedriver + 826669\n7   chromedriver                        0x000000010fa82134 chromedriver + 926004\n8   chromedriver                        0x000000010fa69b33 chromedriver + 826163\n9   chromedriver                        0x000000010fa3a9fd chromedriver + 633341\n10  chromedriver                        0x000000010fa3c051 chromedriver + 639057\n11  chromedriver                        0x000000010fdf530e chromedriver + 4543246\n12  chromedriver                        0x000000010fdf9a88 chromedriver + 4561544\n13  chromedriver                        0x000000010fe016df chromedriver + 4593375\n14  chromedriver                        0x000000010fdfa8fa chromedriver + 4565242\n15  chromedriver                        0x000000010fdd02cf chromedriver + 4391631\n16  chromedriver                        0x000000010fe195b8 chromedriver + 4691384\n17  chromedriver                        0x000000010fe19739 chromedriver + 4691769\n18  chromedriver                        0x000000010fe2f81e chromedriver + 4782110\n19  libsystem_pthread.dylib             0x00007ff80596e4e1 _pthread_start + 125\n20  libsystem_pthread.dylib             0x00007ff805969f6b thread_start + 15", "trace": "test_data1 = 'pytest'\n\n    @allure.testcase(\"http://www.github.com\")\n    @allure.feature(\"百度搜索\")\n    @pytest.mark.parametrize('test_data1',['allure','pytest','unittest'])\n    def test_steps_demo(test_data1):\n            with allure.step(\"打开百度网页\"):\n                # \"/Users/fengsonglin/project/TestTech/pycharm_test_env/testcases/chromedriver.exe\"\n                driver = webdriver.Chrome()\n                driver.get(\"http://www.baidu.com\")\n                driver.maximize_window()\n    \n            with allure.step(f\"输入搜索词:{test_data1}\"):\n>               driver.find_element(\"kw\").send_keys(test_data1)\n\ntest_baidudemo.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:861: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1067bd700>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: invalid locator\\\\n  (Sessi...ff80596e4e1 _pthread_start + 125\\\\n20  libsystem_pthread.dylib             0x00007ff805969f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\nE         (Session info: chrome=107.0.5304.110)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010fe282c8 chromedriver + 4752072\nE       1   chromedriver                        0x000000010fda8463 chromedriver + 4228195\nE       2   chromedriver                        0x000000010fa0bb18 chromedriver + 441112\nE       3   chromedriver                        0x000000010fa4879c chromedriver + 690076\nE       4   chromedriver                        0x000000010fa49061 chromedriver + 692321\nE       5   chromedriver                        0x000000010fa845e4 chromedriver + 935396\nE       6   chromedriver                        0x000000010fa69d2d chromedriver + 826669\nE       7   chromedriver                        0x000000010fa82134 chromedriver + 926004\nE       8   chromedriver                        0x000000010fa69b33 chromedriver + 826163\nE       9   chromedriver                        0x000000010fa3a9fd chromedriver + 633341\nE       10  chromedriver                        0x000000010fa3c051 chromedriver + 639057\nE       11  chromedriver                        0x000000010fdf530e chromedriver + 4543246\nE       12  chromedriver                        0x000000010fdf9a88 chromedriver + 4561544\nE       13  chromedriver                        0x000000010fe016df chromedriver + 4593375\nE       14  chromedriver                        0x000000010fdfa8fa chromedriver + 4565242\nE       15  chromedriver                        0x000000010fdd02cf chromedriver + 4391631\nE       16  chromedriver                        0x000000010fe195b8 chromedriver + 4691384\nE       17  chromedriver                        0x000000010fe19739 chromedriver + 4691769\nE       18  chromedriver                        0x000000010fe2f81e chromedriver + 4782110\nE       19  libsystem_pthread.dylib             0x00007ff80596e4e1 _pthread_start + 125\nE       20  libsystem_pthread.dylib             0x00007ff805969f6b thread_start + 15\n\n../venv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:249: InvalidArgumentException"}, "steps": [{"name": "打开百度网页", "status": "passed", "start": 1669124579456, "stop": 1669124582006}, {"name": "输入搜索词:pytest", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\n  (Session info: chrome=107.0.5304.110)\nStacktrace:\n0   chromedriver                        0x000000010fe282c8 chromedriver + 4752072\n1   chromedriver                        0x000000010fda8463 chromedriver + 4228195\n2   chromedriver                        0x000000010fa0bb18 chromedriver + 441112\n3   chromedriver                        0x000000010fa4879c chromedriver + 690076\n4   chromedriver                        0x000000010fa49061 chromedriver + 692321\n5   chromedriver                        0x000000010fa845e4 chromedriver + 935396\n6   chromedriver                        0x000000010fa69d2d chromedriver + 826669\n7   chromedriver                        0x000000010fa82134 chromedriver + 926004\n8   chromedriver                        0x000000010fa69b33 chromedriver + 826163\n9   chromedriver                        0x000000010fa3a9fd chromedriver + 633341\n10  chromedriver                        0x000000010fa3c051 chromedriver + 639057\n11  chromedriver                        0x000000010fdf530e chromedriver + 4543246\n12  chromedriver                        0x000000010fdf9a88 chromedriver + 4561544\n13  chromedriver                        0x000000010fe016df chromedriver + 4593375\n14  chromedriver                        0x000000010fdfa8fa chromedriver + 4565242\n15  chromedriver                        0x000000010fdd02cf chromedriver + 4391631\n16  chromedriver                        0x000000010fe195b8 chromedriver + 4691384\n17  chromedriver                        0x000000010fe19739 chromedriver + 4691769\n18  chromedriver                        0x000000010fe2f81e chromedriver + 4782110\n19  libsystem_pthread.dylib             0x00007ff80596e4e1 _pthread_start + 125\n20  libsystem_pthread.dylib             0x00007ff805969f6b thread_start + 15\n\n", "trace": "  File \"/Users/fengsonglin/project/TestTech/pycharm_test_env/testcases/test_baidudemo.py\", line 23, in test_steps_demo\n    driver.find_element(\"kw\").send_keys(test_data1)\n  File \"/Users/fengsonglin/project/TestTech/pycharm_test_env/venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 861, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"/Users/fengsonglin/project/TestTech/pycharm_test_env/venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"/Users/fengsonglin/project/TestTech/pycharm_test_env/venv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1669124582006, "stop": 1669124582014}], "parameters": [{"name": "test_data1", "value": "'pytest'"}], "start": 1669124579456, "stop": 1669124582015, "uuid": "4ec30e64-a0d0-4611-94b8-d9cd0690e738", "historyId": "78bf30ba964b80676a29ef86e279c69c", "testCaseId": "c1bd71ed6b29aa553aa5af4cbca54344", "fullName": "test_baidudemo#test_steps_demo", "labels": [{"name": "feature", "value": "百度搜索"}, {"name": "suite", "value": "test_baidudemo"}, {"name": "host", "value": "fengsonglins-MacBook-Pro.local"}, {"name": "thread", "value": "44814-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_baidudemo"}], "links": [{"type": "test_case", "url": "http://www.github.com", "name": "http://www.github.com"}]}